

options{
    STATIC = false;
}

PARSER_BEGIN(Adder)   // 跳过错误，先暂时这样写
import java.io.*;
class Adder {

    public static void main(String[] args) {
        for(String arg : args) {
            try{
                System.out.println(evaluate(arg));
            }catch(Exception e){
                System.err.println(e.getMessage());
            }
        }
    }

    public static long evaluate(String src) throws ParseException {
        Reader reader = new StringReader(src);
        return new Adder(reader).expr();
    }
}

PARSER_END(Adder)


// 空白符, 这里使用的是 SPECIAL_TOKEN 指令，而不是 SKIP 指令，好处是在生成 AST
SPECIAL_TOKEN: {
    < SPACES : ([" ","\t","\n","\r","\f"])+ >
}

// 块注释 more 指令可以将一个 token 分割成多条词法规则来描述,下面的写法是基于状态转移的写法
// 词法分析器扫描到 /* 之后会跳转到 IN_BLOCK_COMMENT 标识的两条规则进行进一步扫描。当扫描到 */ 就会退出当前的规则，回到一开始的状态
// 解决了 块注释最长匹配的问题，以及扫描不完整识别不出的问题
MORE: {<"/*"> : IN_BLOCK_COMMENT}
<IN_BLOCK_COMMENT> MORE: {<~[]>}
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: {<BLOCK_COMMENT : "*/"> : DEFAULT}


// 跳过行注释
SPECIAL_TOKEN: {
    < LINE_COMMENT : "//" (~["\n","\r"])* (["\n","\r","\r\n"])? >
}
// 保留字
TOKEN: {

        // 类型说明保留字
       < VOID : "void">
    |  < CHAR : "char">
    |  < SHORT : "short">
    |  < INT : "int">
    |  < LONG : "long">
    |  < STRUCT : "struct">
    |  < UNION : "union">
    |  < ENUM : "enum">
    |  < UNSIGNED : "unsigned">
    |  < SIGNED : "signed">
    |  < CONST : "const">

    //  存储类型保留字

    |  < STATIC : "static">
    |  < EXTERN : "extern">

    // 语句定义保留字
    |  < IF : "if">
    |  < ELSE : "else">
    |  < SWITCH : "switch">
    |  < CASE : "case">
    |  < DEFAULT_ : "default">
    |  < WHILE : "while">
    |  < DO : "do">
    |  < FOR : "for">
    |  < RETURN : "return">
    |  < BREAK : "break">
    |  < CONTINUE : "continue">
    |  < GOTO : "goto">
    |  < TYPEDEF : "typedef">

   // 长度运算符保留字

    |  < SIZEOF : "sizeof">

}

// 标识符， 以小写字母、大写字符、下划线开头，后接任意位 小写字母、大写字母、下划线、数字
TOKEN: {
    < IDENTIFIER : ["a" - "z", "A" - "Z", "_"](["a" - "z", "A" - "Z", "_", "0" - "9"])* >
}

// 数值, 十进制、十六进制、八进制, U 表示 无符号数， L 表示 长整数
TOKEN: {
    < INTEGER : ["1" - "9"] (["0" - "9"])* ("U")? ("L")?
                | "0" ["x","X"] (["0" - "9","A" - "F", "a" - "f"])+ ("U")? ("L")?
                | "0" (["0" - "7"])* ("U")? ("L")? >
}

 // 扫描字符, \172 这种表示方式是 ascii 的字符表示方式
 MORE: {<"'"> : IN_CHARACTER}
 <IN_CHARACTER> MORE: {
        <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM
      | <"\\" (["0" - "7"]){3}> : CHARACTER_TERM
      | <"\\" ~[]> : CHARACTER_TERM
 }
 <CHARACTER_TERM> TOKEN: {<CHARACTER : "'" > : DEFAULT}

// 扫描字符串
 MORE: {<"\""> : IN_STRING}
 <IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>
    | <"\\" (["0" - "7"])>
    | <"\\" ~[]>
 }
 <IN_STRING> TOKEN: {<STRING : "\""> : DEFAULT}


   //--------------------------------------------- 语法分析 -----------------------------------------------//





